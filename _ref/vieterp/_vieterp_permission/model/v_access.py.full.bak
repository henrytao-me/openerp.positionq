# -*- coding: utf-8 -*-

from openerp.osv import osv, fields
from openerp.osv.fields import datetime as datetime_field
from openerp.tools.translate import _
import logging
from datetime import datetime
from openerp.tools import DEFAULT_SERVER_DATETIME_FORMAT
from unidecode import unidecode
import types

class v_access(osv.osv):
    
    SELECTION = (('2', 'Yes'),
                ('1', 'Inherit'),
                ('0', 'No'))
    
    def function_level(self, cr, uid, ids, fields, args, context={}):
        res = {}
        for obj in self.read(cr, uid, ids, ['group_id', 'user_id', 'object_id']):
            level = 3
            if not obj['group_id']:
                level -= 1
            if not obj['user_id']:
                level -= 1
            if not obj['object_id']:
                level -= 1
            res[obj['id']] = level
        return res
    #read
    def function_f_real_perm_read(self, cr, uid, ids, fields, args, context={}):
        return self.function_f_real_perm(cr, uid, 'perm_read', ids, fields, args, context)
    
    def function_tg_real_perm_read(self, cr, uid, ids, fields, args, context={}):
        return self.function_tg_real_perm(cr, uid, 'perm_read', ids, fields, args, context)
    #write
    def function_f_real_perm_write(self, cr, uid, ids, fields, args, context={}):
        return self.function_f_real_perm(cr, uid, 'perm_write', ids, fields, args, context)
    
    def function_tg_real_perm_write(self, cr, uid, ids, fields, args, context={}):
        print 'aaaaaaaaaaaaaaaaaaaaa'
        return self.function_tg_real_perm(cr, uid, 'perm_write', ids, fields, args, context)
    #create
    def function_f_real_perm_create(self, cr, uid, ids, fields, args, context={}):
        return self.function_f_real_perm(cr, uid, 'perm_create', ids, fields, args, context)
    
    def function_tg_real_perm_create(self, cr, uid, ids, fields, args, context={}):
        return self.function_tg_real_perm(cr, uid, 'perm_create', ids, fields, args, context)
    #unlink
    def function_f_real_perm_unlink(self, cr, uid, ids, fields, args, context={}):
        return self.function_f_real_perm(cr, uid, 'perm_unlink', ids, fields, args, context)
    
    def function_tg_real_perm_unlink(self, cr, uid, ids, fields, args, context={}):
        return self.function_tg_real_perm(cr, uid, 'perm_unlink', ids, fields, args, context)
    #manage
    def function_f_real_perm_manage(self, cr, uid, ids, fields, args, context={}):
        return self.function_f_real_perm(cr, uid, 'perm_manage', ids, fields, args, context)
    
    def function_tg_real_perm_manage(self, cr, uid, ids, fields, args, context={}):
        return self.function_tg_real_perm(cr, uid, 'perm_manage', ids, fields, args, context)
    #
    def function_f_real_perm(self, cr, uid, perm, ids, fields, args, context={}):
        _context = context.copy()
        _context.update({'real_'+perm: True})
        for obj in self.read(cr, uid, ids, [perm, 'parent_'+perm, 'real_'+perm]):
            real_perm = obj['parent_'+perm]            
            if obj[perm] == '0':
                real_perm = False
            elif obj[perm] == '2':
                real_perm = True
            if real_perm != obj['real_'+perm]:
                self.write(cr, uid, obj['id'], {'real_'+perm: real_perm}, context=_context)
        return dict((k, '') for k in ids)
    
    def function_tg_real_perm(self, cr, uid, perm, ids, fields, args, context={}):        
        if context.get('real_'+perm, False) == True:
            ls = self.read(cr, uid, ids, ['level', 'group_id', 'user_id', 'object_id'])
            ls.sort(key=lambda x: x['level'])
            for obj in ls:
                group_id = False if not obj['group_id'] else obj['group_id'][0]
                user_id = False if not obj['user_id'] else obj['user_id'][0]
                object_id = False if not obj['object_id'] else obj['object_id'][0]                
                if obj['level'] == 1:       #update parent_perm_... level 2
                    tmp_ids = self.search(cr, uid, [
                        ('level','=',2), 
                        '|', '&', ('group_id','=',group_id), ('group_id','!=',False),
                        '|', '&', ('user_id','=',user_id), ('user_id','!=',False),
                             '&', ('object_id','=',object_id), ('object_id','!=',False),
                                                    ])
                    self._update_parent_perm_level_2(cr, uid, perm, tmp_ids, context=context)
                elif obj['level'] == 2:     #update parent_perm_... level 3
                    tmp_ids = self.search(cr, uid, [
                        ('level','=',3), 
                        '|', '&', '&', ('group_id','=',group_id), ('group_id','!=',False),
                                  '&', ('user_id','=',user_id), ('user_id','!=',False),
                        '|', '&', '&', ('group_id','=',group_id), ('group_id','!=',False),
                                  '&', ('object_id','=',object_id), ('object_id','!=',False),
                             '&', '&', ('user_id','=',user_id), ('user_id','!=',False),
                                  '&', ('object_id','=',object_id), ('object_id','!=',False),
                                                    ])
                    self._update_parent_perm_level_3(cr, uid, perm, tmp_ids, context=context)
                elif obj['level'] == 3:     #update ir.model.access
                    pass
        return dict((k, '') for k in ids)
    
    def _update_parent_perm_level_2(self, cr, uid, perm, ids, context={}):
        bak = {'group': {}, 'user': {}, 'object': {}}
        for obj in self.read(cr, uid, ids, ['group_id', 'user_id', 'object_id', 'parent_'+perm]):
            group_id = False if not obj['group_id'] else obj['group_id'][0]
            user_id = False if not obj['user_id'] else obj['user_id'][0]
            object_id = False if not obj['object_id'] else obj['object_id'][0]
            #
            if group_id and not bak['group'].has_key(group_id):
                tmp_ids = self.search(cr, uid, [('level','=',1), ('group_id','=',group_id)])
                if tmp_ids:
                    bak['group'][group_id] = self.read(cr, uid, tmp_ids[0], ['real_'+perm])['real_'+perm]
            #       
            if user_id and not bak['user'].has_key(user_id):
                tmp_ids = self.search(cr, uid, [('level','=',1), ('user_id','=',user_id)])
                if tmp_ids:
                    bak['user'][user_id] = self.read(cr, uid, tmp_ids[0], ['real_'+perm])['real_'+perm]
            #
            if object_id and not bak['object'].has_key(object_id):
                tmp_ids = self.search(cr, uid, [('level','=',1), ('object_id','=',object_id)])
                if tmp_ids:
                    bak['object'][object_id] = self.read(cr, uid, tmp_ids[0], ['real_'+perm])['real_perm']
            #
            parent_perm = bak['group'].get(group_id, False) or bak['user'].get(user_id, False) or bak['object'].get(object_id, False)
            if obj['parent_'+perm] != parent_perm:
                self.write(cr, uid, obj['id'], {'parent_'+perm: parent_perm}, context=context)
    
    def _update_parent_perm_level_3(self, cr, uid, perm, ids, context={}):
        bak = {'gu': {}, 'go': {}, 'uo': {}}
        for obj in self.read(cr, uid, ids, ['group_id', 'user_id', 'object_id', 'parent_'+perm]):
            group_id = False if not obj['group_id'] else obj['group_id'][0]
            user_id = False if not obj['user_id'] else obj['user_id'][0]
            object_id = False if not obj['object_id'] else obj['object_id'][0]
            gu = str(group_id) + '_' + str(user_id)
            go = str(group_id) + '_' + str(object_id)
            uo = str(user_id) + '_' + str(object_id)
            #
            if not bak['gu'].has_key(gu):
                tmp_ids = self.search(cr, uid, [('level','=',2), 
                                                ('group_id','=',group_id),
                                                ('user_id','=',user_id)])
                if tmp_ids:
                    bak['gu'][gu] = self.read(cr, uid, tmp_ids[0], ['real_'+perm])['real_'+perm]
            #       
            if not bak['go'].has_key(go):
                tmp_ids = self.search(cr, uid, [('level','=',2), 
                                                ('group_id','=',group_id),
                                                ('object_id','=',object_id)])
                if tmp_ids:
                    bak['go'][go] = self.read(cr, uid, tmp_ids[0], ['real_'+perm])['real_'+perm]
            #
            if not bak['uo'].has_key(uo):
                tmp_ids = self.search(cr, uid, [('level','=',2),
                                                ('user_id','=',user_id),
                                                ('object_id','=',object_id)])
                if tmp_ids:
                    bak['uo'][uo] = self.read(cr, uid, tmp_ids[0], ['real_'+perm])['real_'+perm]
            #
            parent_perm = bak['gu'].get(gu, False) or bak['go'].get(go, False) or bak['uo'].get(uo, False)
            if obj['parent_'+perm] != parent_perm:
                self.write(cr, uid, obj['id'], {'parent_'+perm: parent_perm}, context=context)
    
    _name = 'v.access'
    _description = 'Customized access control management'
    _columns = {
        'group_id': fields.many2one('v.groups', string="Nhóm người dùng"),
        'user_id': fields.many2one('res.users', string="Người dùng"),
        'object_id': fields.many2one('v.objects', string="Đối tượng"),
        #
        'level': fields.function(function_level, method=True, string="Level", type="integer", 
                store={
                    'v.access': (lambda self,cr,uid,ids,context=None: ids, None, 10),
                }),
        #     
        'perm_read': fields.selection(SELECTION, string='Xem', required=True),
        'perm_unlink': fields.selection(SELECTION, string='Xoá', required=True),
        'perm_write': fields.selection(SELECTION, string='Sửa', required=True),
        'perm_create': fields.selection(SELECTION, string='Tạo', required=True),
        'perm_manage': fields.selection(SELECTION, string='Quản trị', required=True),
        #
        'parent_perm_read': fields.boolean('Xem'),
        'parent_perm_unlink': fields.boolean('Xóa'),
        'parent_perm_write': fields.boolean('Sửa'),
        'parent_perm_create': fields.boolean('Tạo'),
        'parent_perm_manage': fields.boolean('Quản trị'),
        #
        'real_perm_read': fields.boolean('Xem'),
        'real_perm_unlink': fields.boolean('Xóa'),
        'real_perm_write': fields.boolean('Sửa'),
        'real_perm_create': fields.boolean('Tạo'),
        'real_perm_manage': fields.boolean('Quản trị'),
        #read
        'f_real_perm_read': fields.function(function_f_real_perm_read, method=True, string="Xem", type="char", 
                store={
                    'v.access': (lambda self,cr,uid,ids,context=None: ids, ['perm_read', 
                                                                            'parent_perm_read'], 20),
                }),
        'tg_real_perm_read': fields.function(function_tg_real_perm_read, method=True, string="Xem", type="char",
                store={
                    'v.access': (lambda self,cr,uid,ids,context=None: ids, ['real_perm_read'], 15),
                }),
        #write
        'f_real_perm_write': fields.function(function_f_real_perm_write, method=True, string="Sửa", type="char", 
                store={
                    'v.access': (lambda self,cr,uid,ids,context=None: ids, ['perm_write', 
                                                                            'parent_perm_write'], 20),
                }),
        'tg_real_perm_write': fields.function(function_tg_real_perm_write, method=True, string="Sửa", type="char",
                store={
                    'v.access': (lambda self,cr,uid,ids,context=None: ids, ['real_perm_write'], 15),
                }),
        #create
        'f_real_perm_create': fields.function(function_f_real_perm_create, method=True, string="Tạo", type="char", 
                store={
                    'v.access': (lambda self,cr,uid,ids,context=None: ids, ['perm_create', 
                                                                            'parent_perm_create'], 20),
                }),
        'tg_real_perm_create': fields.function(function_tg_real_perm_create, method=True, string="Tạo", type="char",
                store={
                    'v.access': (lambda self,cr,uid,ids,context=None: ids, ['real_perm_create'], 15),
                }),
        #unlink
        'f_real_perm_unlink': fields.function(function_f_real_perm_unlink, method=True, string="Xóa", type="char", 
                store={
                    'v.access': (lambda self,cr,uid,ids,context=None: ids, ['perm_unlink', 
                                                                            'parent_perm_unlink'], 20),
                }),
        'tg_real_perm_unlink': fields.function(function_tg_real_perm_unlink, method=True, string="Xóa", type="char",
                store={
                    'v.access': (lambda self,cr,uid,ids,context=None: ids, ['real_perm_unlink'], 15),
                }),
        #manage
        'f_real_perm_manage': fields.function(function_f_real_perm_manage, method=True, string="Quản trị", type="char", 
                store={
                    'v.access': (lambda self,cr,uid,ids,context=None: ids, ['perm_manage', 
                                                                            'parent_perm_manage'], 20),
                }),
        'tg_real_perm_write': fields.function(function_tg_real_perm_manage, method=True, string="Quản trị", type="char",
                store={
                    'v.access': (lambda self,cr,uid,ids,context=None: ids, ['real_perm_manage'], 15),
                }),
        #
        'ready': fields.boolean('Ready'),
        '_free': fields.char('Free', readonly=True)
    }
    _defaults = {
        'perm_read': lambda *x: '1',
        'perm_unlink': lambda *x: '1',
        'perm_write': lambda *x: '1',
        'perm_create': lambda *x: '1',
        'perm_manage': lambda *x: '1',
        
        'parent_perm_read': lambda *x: False,
        'parent_perm_write': lambda *x: False,
        'parent_perm_create': lambda *x: False,
        'parent_perm_unlink': lambda *x: False,
        'parent_perm_manage': lambda *x: False,
        
        'real_perm_read': lambda *x: False,
        'real_perm_write': lambda *x: False,
        'real_perm_create': lambda *x: False,
        'real_perm_unlink': lambda *x: False,
        'real_perm_manage': lambda *x: False,
        
        'ready': lambda *x: True,
        '_free': lambda *x: ''
    }
    _order = 'group_id, user_id, object_id'
    
    _is_reload = True
    
    def search(self, cr, uid, args, offset=0, limit=None, order=None, context=None, count=False):
        self.reload_access(cr, uid, context=context)
        res = super(v_access, self).search(cr, uid, args, offset=offset, limit=limit, 
                                           order=order, context=context, count=count)
        return res
    
    def reload_access(self, cr, uid, context={}):
        
        return True
    
v_access()

# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:

